{"version":3,"sources":["operations.js","buttons.js","App.js","index.js"],"names":["OPERATIONS","add","a","b","String","parseFloat","subtract","multiply","divide","power","BUTTONS","val","name","type","OPERATOR_SYMBOLS","equals","clear","Calculator","props","initialState","total","current","operator","state","buttonPress","bind","action","newState","currentNum","isNaN","operationReducer","this","setState","className","vals","operate","React","Component","Buttons","map","btn","key","onClick","Screen","useFitText","fontSize","ref","operatorSymbol","screen","style","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.897fc4b9.chunk.js","sourcesContent":["const OPERATIONS = {\n    add : (a, b) => String(parseFloat(a) + parseFloat(b)),\n    subtract : (a, b) => a - b,\n    multiply : (a, b) => a * b,\n    divide : (a, b) => a / b,\n    power: (a, b) => a**b,\n}\n\nexport default OPERATIONS","const BUTTONS = [\n    { val: 0, name: 'zero', type: 'num'},\n    { val: 1, name: 'one', type: 'num'},\n    { val: 2, name: 'two', type: 'num'},\n    { val: 3, name: 'three', type: 'num'},\n    { val: 4, name: 'four', type: 'num'},\n    { val: 5, name: 'five', type: 'num'},\n    { val: 6, name: 'six', type: 'num'},\n    { val: 7, name: 'seven', type: 'num'},\n    { val: 8, name: 'eight', type: 'num'},\n    { val: 9, name: 'nine', type: 'num'},\n    { val: '.', name: 'decimal', type: 'num'},\n    { val: '×', name: 'multiply', type: 'oper'},\n    { val: '÷', name: 'divide', type: 'oper'},\n    { val: '+', name: 'add', type: 'oper'},\n    { val: '-', name: 'subtract', type: 'oper'},\n    { val: '^', name: 'power', type: 'oper'},\n    { val: '=', name: 'equals', type: 'equals'},\n    { val: 'AC', name: 'clear', type: 'clear'}\n]\n\nexport default BUTTONS","import React from 'react';\nimport './App.scss';\n\nimport useFitText from 'use-fit-text';\n\nimport OPERATIONS from './operations';\nimport BUTTONS from './buttons';\n\nconst OPERATOR_SYMBOLS = {\n  add: '+',\n  subtract: '-',\n  multiply: '×',\n  divide: '÷',\n  power: '^',\n  equals: '=',\n  clear: 'AC',\n}\n\n\nconst operationReducer = (state, action) => {\n  const {val, type, name} = action;\n  switch (type) {\n    case 'num':\n      let currentNum = (String(state.current) === '0' && val !== '.') ? val : String(state.current) + val; // sub zero except if decimal added\n      return {\n        ...state,\n        total: (state.operator) ? state.total : null, //remove total if no oper\n        current: (isNaN(currentNum)) ? state.current : currentNum,  // validated number check, no multi decimal\n      }\n    case 'oper':\n      // operater after total but no current, just replaces/adds operator\n      if (state.total && !state.current) {\n        return {\n          ...state,\n          operator: name,\n        }\n      } \n      if (state.current) {\n        // oper after current but no total, pushes current to total and adds oper\n        if (!state.total && !state.operator) {\n          return {\n            ...state,\n            total: state.current,\n            current: 0,\n            operator: name,\n          }\n        // post equal, total from before, current num before current oper -> replace tot\n        } else if (state.total && !state.operator) {\n          return {\n            ...state,\n            total: state.current,\n            current: 0,\n            operator: name,\n          }\n          // oper after current and total and oper, total from operation, current reset and oper replace\n        } else if (state.total && state.operator) {\n          return {\n            ...state,\n            total: OPERATIONS[state.operator](state.total, state.current),\n            current: 0,\n            operator: name,\n          }\n        } \n      }\n      return state\n      \n    case 'equals':\n      if (state.current && state.total) {\n        if (state.operator) {\n          return {\n            ...state,\n            total: OPERATIONS[state.operator](state.total, state.current),\n            current: 0,\n            operator: null,\n          }\n        } else {\n          return {\n            ...state,\n            total: null,\n          }\n        }\n      }\n      return {\n        state\n      }\n  \n    case 'clear': \n      return {\n        //SUB initialState\n        total: null,\n        current: 0,\n        operator: null,\n      }\n\n    default:\n      return state;\n  }\n}\n\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.initialState = {\n      total: null,\n      current: 0,\n      operator: null,\n    }\n    this.state = this.initialState;\n    this.buttonPress = this.buttonPress.bind(this);\n  }\n\n  \n  buttonPress({val, type, name}) {\n    const action = {\n      type,\n      val,\n      name,\n    };\n    const newState = operationReducer(this.state, action);\n    this.setState(newState);\n  }\n\n\n  render() {\n    return (\n      <div className='calculator'>\n        <Screen vals={this.state}/>\n        <Buttons operate={this.buttonPress}/>\n      </div>\n    )\n  }\n}\n\n\nconst Buttons = (props) => {\n  return (\n    <ul className='buttons'>\n      {BUTTONS.map((btn) => \n        <li key={btn.val} className={'btn-' + btn.name}>\n          <button onClick={() => props.operate(btn)}>{btn.val}</button>\n        </li>\n      )}\n    </ul>\n  )\n}\n\n\nconst Screen = ({vals}) => {\n  const { fontSize, ref } = useFitText();\n\n  const {total, current, operator} = vals;\n  const operatorSymbol = OPERATOR_SYMBOLS[operator];\n  let screen = '';\n\n  if (total) {\n    screen += total;\n    if (operator) {\n      screen += operatorSymbol;\n      if (current) {\n        screen += current;\n      }\n    }\n  } else {\n    screen += current;\n    if (operator) {\n      screen += operatorSymbol;\n    }\n  }\n\n  return(\n    <div className='screen'>\n      <div className='output' ref={ref} style={{ fontSize, }}>\n        {screen}\n      </div>\n    </div>\n  )\n}\n\nexport default Calculator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}